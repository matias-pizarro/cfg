#!/bin/sh -e

GIT_CMD=git
command -v ${GIT_CMD} > /dev/null || GIT_CMD=none
if [ "${GIT_CMD}" = "none" ]; then
    echo "ERROR: git executable not found."
    exit 1
fi

if [ "$( whoami )" = "root" ]; then
    IS_ROOT="true"
    DOAS_CMD=""
else
    DOAS_CMD=doas
    command -v ${DOAS_CMD} > /dev/null || DOAS_CMD=sudo
    command -v ${DOAS_CMD} > /dev/null || DOAS_CMD=none
    if [ "${DOAS_CMD}" = "none" ]; then
        echo "ERROR: sudo executable or equivalent not found. Please run as root."
        exit 2
    fi
    DOAS_CMD=$(which ${DOAS_CMD})
fi

check_for_gitk () {
    GITK_CMD=gitk
    command -v ${GITK_CMD} > /dev/null || GITK_CMD=none
    if [ "${GITK_CMD}" = "none" ]; then
        echo "ERROR: gitk executable not found."
        exit 3
    fi
}

CFG_ROOT_DIR="${CFG_ROOT_DIR:-/usr/local/cfg}"
USE_ZFS="${USE_ZFS:-true}"
CFG_ROOT_ZFS="${CFG_ROOT_ZFS:-zroot/CONFIG}"
BOX_CFG_REPO_NAME="${BOX_CFG_REPO_NAME:-$(hostname)}"
USER_CONFIGS_PREFIX="${USER_CONFIGS_PREFIX:-user_}"
BASE_BOX_ADD_ITEMS=" \
    /.gitignore \
    /boot/loader.conf \
    /etc \
    /usr/local/cfg/info \
    /usr/local/etc \
    /var/cron/tabs \
    /var/unbound/ \
"

if [ -f /usr/local/etc/cfg.conf ]; then
  . /usr/local/etc/cfg.conf
fi

ADD="false"
USER_DOAS_CMD="${DOAS_CMD}"

if [ "${1}" = "--gui" ]; then
    check_for_gitk
    GITK=$(which gitk)
    CHOWN_CFG_GITK_DIR="false"
    shift 1
elif [ "${1}" = "--add" ]; then
    ADD="true"
    shift 1
fi

if [ "${1}" = "--box" ]; then
    MODE="box"
    CFG_REPO_NAME="${BOX_CFG_REPO_NAME}"
    WORK_TREE=/
    shift 1
elif [ "${1}" = "--root" ]; then
    MODE="root"
    CFG_REPO_NAME="${USER_CONFIGS_PREFIX}root"
    WORK_TREE=/root
    shift 1
else
    MODE="user"
    CFG_REPO_NAME="${USER_CONFIGS_PREFIX}$(whoami)"
    WORK_TREE="${HOME}"
    USER_DOAS_CMD=""
    CHOWN_CFG_GITK_DIR="true"
fi

ZFS_BASE_PROPERTIES="\
name,canmount,mounted,mountpoint,readonly,compression,copies,checksum,\
encryptionroot,encryption,keyformat,keylocation,quota,atime,exec,setuid,copies,\
sync,sharenfs,sharesmb\
"

ZFS_FULL_PROPERTIES="\
name,type,creation,used,available,referenced,ratio,mounted,origin,quota,\
reservation,volsize,volblocksize,recordsize,mountpoint,sharenfs,checksum,\
compression,compressratio,atime,devices,exec,setuid,readonly,jailed,snapdir,\
aclmode,aclinherit,createtxg,canmount,xattr,copies,version,utf8only,\
normalization,casesensitivity,vscan,nbmand,sharesmb,refquota,refreservation,\
guid,primarycache,secondarycache,usedbysnapshots,usedbydataset,usedbychildren,\
usedbyrefreservation,defer_destroy,userrefs,logbias,objsetid,dedup,mlslabel,\
sync,dnodesize,refratio,written,clones,logicalused,logicalreferenced,volmode,\
filesystem_limit,sslimit,filesystem_count,sscount,snapdev,acltype,context,\
fscontext,defcontext,rootcontext,relatime,redundant_metadata,overlay,resumetok,\
receive_resume_token,encryption,keylocation,keyformat,pbkdf2iters,\
encryptionroot,keystatus,special_small_blocks,redact_snaps,snapshots_changed,\
prefetch\
"

if [ "${USE_ZFS}" = "true" ]; then
    if [ -n "zfs list ${CFG_ROOT_ZFS} 2>&1 | grep 'does not exist'" ]; then
        ${DOAS_CMD} zfs create -p -o mountpoint="${CFG_ROOT_DIR}" "${CFG_ROOT_ZFS}"
    fi
    # The current mountpoint can differ
    # e.g. when the pool is mounted in an alternate location
    CURRENT_CFG_ROOT_DIR="$(${DOAS_CMD} zfs get -H -o value mountpoint ${CFG_ROOT_ZFS})"
    if [ ! "${CURRENT_CFG_ROOT_DIR}" = "${CFG_ROOT_DIR}" ]; then
        echo "ERROR: ${CFG_ROOT_DIR} is currently mounted on ${CURRENT_CFG_ROOT_DIR}"
        exit 4
    fi
    if [ ! -d "${CFG_ROOT_DIR}" ]; then
        echo "ERROR: ${CFG_ROOT_DIR} does not exist"
        exit 5
    fi
fi

CFG_REPO_ZFS="${CFG_ROOT_ZFS}/${CFG_REPO_NAME}"
CFG_GIT_DIR="${CFG_ROOT_DIR}/${CFG_REPO_NAME}"
CFG_GITK_DIR="${CFG_ROOT_DIR}/gitk/${CFG_REPO_NAME}"
CFG_GITK_SYMLINK="${CFG_GITK_DIR}/.git"
BOX_INFO_DIR="${CFG_ROOT_DIR}/info/${BOX_CFG_REPO_NAME}"

if [ ! -d "${CFG_GIT_DIR}" ]; then
    if [ "${USE_ZFS}" = "true" ]; then
        ${DOAS_CMD} zfs create -p "${CFG_REPO_ZFS}"
    else
        ${DOAS_CMD} mkdir -p "${CFG_GIT_DIR}"
    fi
    if [ ! -d "${CFG_GIT_DIR}" ]; then
        echo "ERROR: ${CFG_GIT_DIR} does not exist"
        exit 4
    fi
fi

if [ ! -d "${BOX_INFO_DIR}" ]; then
    ${DOAS_CMD} mkdir -p "${BOX_INFO_DIR}"
fi

pkg_info() {
    ${DOAS_CMD} pkg prime-origins | uniq | \
        ${DOAS_CMD} dd of="${BOX_INFO_DIR}"/pkg_prime_info.txt;
    ${DOAS_CMD} pkg info | \
        ${DOAS_CMD} dd of="${BOX_INFO_DIR}"/pkg_full_info.txt;
}

zfs_base_info() {
    ${DOAS_CMD} zfs list -o ${ZFS_BASE_PROPERTIES} | \
        ${DOAS_CMD} dd of="${BOX_INFO_DIR}"/zfs_base_info.txt
}

zfs_full_info() {
    ${DOAS_CMD} zfs list -o ${ZFS_FULL_PROPERTIES} | \
        ${DOAS_CMD} dd of="${BOX_INFO_DIR}"/zfs_full_info.txt
}

if [ ! -L "${CFG_GITK_SYMLINK}" ]; then
    ${DOAS_CMD} mkdir -p "${CFG_GITK_DIR}"
    ${DOAS_CMD} ln -sF "${CFG_GIT_DIR}" "${CFG_GITK_SYMLINK}"
fi

if [ "${CHOWN_CFG_GITK_DIR}" = "true" ]; then
    ${DOAS_CMD} chown ${USER} "${CFG_GITK_DIR}"
fi

if [ ! -f "${CFG_GIT_DIR}/HEAD" ]; then
    ${USER_DOAS_CMD} /usr/local/bin/git --git-dir="${CFG_GIT_DIR}" --work-tree=${WORK_TREE} init
fi

if [ -n "${GITK}" ]; then
    cd "${CFG_GITK_DIR}" && ${USER_DOAS_CMD} ${GITK} &
elif [ "${ADD}" = "true" ]; then
    if [ "${MODE}" = "box" ]; then
        pkg_info 1> /dev/null    2> /dev/null
        zfs_base_info 1> /dev/null    2> /dev/null
        zfs_full_info 1> /dev/null    2> /dev/null
        ${USER_DOAS_CMD} /usr/local/bin/git --git-dir="${CFG_GIT_DIR}" --work-tree=${WORK_TREE} add ${BASE_BOX_ADD_ITEMS}
    else
        ${USER_DOAS_CMD} /usr/local/bin/git --git-dir="${CFG_GIT_DIR}" --work-tree=${WORK_TREE} add ${WORK_TREE}
    fi
else
    ${DOAS_CMD} /usr/local/bin/git --git-dir="${CFG_GIT_DIR}" --work-tree=${WORK_TREE} ${1+"$@"}
fi
