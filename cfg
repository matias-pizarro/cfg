#!/bin/sh
# 
# For the POSIX-shell script scaffolding and coding style, inspired by poudriere:
#   Copyright (c) 2010-2013 Baptiste Daroussin <bapt@FreeBSD.org>
#   Copyright (c) 2012-2013 Bryan Drewery <bdrewery@FreeBSD.org>
# For the rest of the script:
#   Copyright (c) 2023-2024 Matias Pizarro <matias@pizarro.net>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

# TODO prompt for missing git configs
# TODO handle edge permissions mismatch cases by creation a cmd_user clone of
#     the ro_repo?
# TODO handle creation of rw clone of ro repos
# TODO msg_debug, _error etc...
# TODO be able to compare a user against another, across arbitrary hosts
# TODO limit 'add' and 'passthrough' + commit-like to an expert mode
#      (where you could compose a diff to be applied somewhere else)
# TODO add examples in README.md
# TODO move helper functions to an include?

# create ro_repos

LC_ALL=C
CFG_VERSION='0.1.14'
CFG_NAME="cfg"
CFG_PKGNAME="${CFG_NAME}-${CFG_VERSION}"
TARGET=
MODE=
HOSTNAME="$(hostname)"
CMD_USER="$(whoami)"
if [ "${CMD_USER}" = "root" ]; then
    IS_ROOT="yes"
else
    IS_ROOT="no"
fi
SHOW_SUMMARY=
DRY_RUN=
DRY_RUN_CMD=
USE_ZFS=yes
USE_DEBUG=
PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/sbin:/usr/local/bin:${PATH}"
VERBOSE=0

ECHO_CMD=$(command -v echo) || ECHO_CMD=none
GIT_CMD=$(command -v git) || GIT_CMD=none
GITK_CMD=$(command -v gitk) || GITK_CMD=none

env_set() {
    local envvar="$1"
    local envvalue="${2:-"\${${envvar}}"}"

    CMD_ENV_S="${CMD_ENV_S:+${CMD_ENV_S} }\"${envvar}=${envvalue}\""
    _EXPORT_LIST="${_EXPORT_LIST:+${_EXPORT_LIST} }${envvar}"
}

# Exporting saved until last to not impact any tests between env_set and
# env -S.
env_export() {
    export ${_EXPORT_LIST}
}

msg_dry_run() {
    echo "    # " "$@"
}

_msg_n() {
    echo "\n" "$@"
}

msg() {
    echo "$@"
}

msg_error() {
    local -; set +x
    local MSG_NESTED
    local prefix

    prefix="${DEV_ERROR:+Dev }Error:"
    MSG_NESTED="${MSG_NESTED_STDERR:-0}"
    case "${MY_JOBID:+set}" in
    set)
        # Send colored msg to bulk log...
        COLOR_ARROW="${COLOR_ERROR}" \
            job_msg "${COLOR_ERROR}${prefix}${COLOR_RESET}" "$@"
        # Needed hack for test output ordering
        if [ "${IN_TEST:-0}" -eq 1 -a -n "${TEE_SLEEP_TIME-}" ]; then
            sleep "${TEE_SLEEP_TIME}"
        fi
        # And non-colored to buld log
        msg "${prefix}" "$@" >&2
        ;;
    *)
        # Send to true stderr
        COLOR_ARROW="${COLOR_ERROR}" \
            echo "${COLOR_ERROR}${prefix}${COLOR_RESET}" "$@" \
            >&2
        ;;
    esac
    return 0
}

msg_dev() {
    local -; set +x
    local MSG_NESTED

    MSG_NESTED="${MSG_NESTED_STDERR:-0}"
    COLOR_ARROW="${COLOR_DEV}" \
        _msg_n "\n" "${COLOR_DEV}Dev:${COLOR_RESET}" "$@" >&2
}

msg_debug() {
    local -; set +x
    local MSG_NESTED

    MSG_NESTED="${MSG_NESTED_STDERR:-0}"
    COLOR_ARROW="${COLOR_DEBUG}" \
        _msg_n "\n" "${COLOR_DEBUG}Debug:${COLOR_RESET}" "$@" >&2
}

check_for_git () {
    if [ "${GIT_CMD}" = "none" ]; then
        msg_error "git executable not found."
        exit 3
    fi
}

check_for_gitk () {
    if [ "${GITK_CMD}" = "none" ]; then
        msg_error "gitk executable not found."
        exit 3
    fi
}

msg_warn() {
    local -; set +x
    local MSG_NESTED MSG_NESTED_STDERR prefix

    : "${MSG_NESTED_STDERR:=0}"
    MSG_NESTED="${MSG_NESTED_STDERR}"
    if [ "${MSG_NESTED_STDERR}" -eq 0 ]; then
        prefix="Warning:"
    else
        unset prefix
    fi
    COLOR_ARROW="${COLOR_WARN}" \
        _msg_n "\n" ${prefix:+"${COLOR_WARN}${prefix}${COLOR_RESET}"} \
        "$@" >&2
}

user_exists() {
    id "${1}" | wc -l | command tr -d ' '
}

BASE_HOST_ADD_ITEMS=" \
    /.cshrc \
    /.gitignore \
    /.profile \
    /COPYRIGHT \
    /etc \
    /usr \
    /var
"

BASE_HOST_FORCE_ADD_ITEMS=" \
    /boot/loader.conf
"

ZFS_BASE_PROPERTIES="\
name,canmount,mounted,mountpoint,readonly,compression,copies,checksum,\
encryptionroot,encryption,keyformat,keylocation,quota,atime,exec,setuid,copies,\
sync,sharenfs,sharesmb\
"

ZFS_COMPARABLE_PROPERTIES="\
name,type,origin,quota,\
reservation,volsize,volblocksize,recordsize,mountpoint,sharenfs,checksum,\
compression,atime,devices,exec,setuid,readonly,jailed,snapdir,\
aclmode,aclinherit,canmount,xattr,copies,version,utf8only,\
normalization,casesensitivity,vscan,nbmand,sharesmb,refquota,refreservation,\
primarycache,secondarycache,defer_destroy,userrefs,logbias,dedup,mlslabel,\
sync,dnodesize,clones,volmode,\
filesystem_limit,sslimit,filesystem_count,sscount,snapdev,acltype,context,\
fscontext,defcontext,rootcontext,relatime,redundant_metadata,overlay,resumetok,\
receive_resume_token,encryption,keylocation,keyformat,pbkdf2iters,\
encryptionroot,keystatus,special_small_blocks,redact_snaps,\
prefetch\
"

ZFS_FULL_PROPERTIES="\
name,type,creation,used,available,referenced,ratio,mounted,origin,quota,\
reservation,volsize,volblocksize,recordsize,mountpoint,sharenfs,checksum,\
compression,compressratio,atime,devices,exec,setuid,readonly,jailed,snapdir,\
aclmode,aclinherit,createtxg,canmount,xattr,copies,version,utf8only,\
normalization,casesensitivity,vscan,nbmand,sharesmb,refquota,refreservation,\
guid,primarycache,secondarycache,usedbysnapshots,usedbydataset,usedbychildren,\
usedbyrefreservation,defer_destroy,userrefs,logbias,objsetid,dedup,mlslabel,\
sync,dnodesize,refratio,written,clones,logicalused,logicalreferenced,volmode,\
filesystem_limit,sslimit,filesystem_count,sscount,snapdev,acltype,context,\
fscontext,defcontext,rootcontext,relatime,redundant_metadata,overlay,resumetok,\
receive_resume_token,encryption,keylocation,keyformat,pbkdf2iters,\
encryptionroot,keystatus,special_small_blocks,redact_snaps,snapshots_changed,\
prefetch\
"

usage() {
    cat << 'EOF'
cfg
===

Usage: cfg [-m|-u <user>] [-H <reference-host>] [-M|-U <reference-user>] [-pag] [-hsnv] command [options]

Options:
    -m         ('me') lets the user running the script be the checked-out user
    -u <user>  the checked-out user
    -H <host>  the reference host   (defaults to the output of 'hostname')
    -M         ('me') lets the user running the script be the reference user
    -U <user>  the reference user   (defaults to the output of 'whoami')

    -p          mode=passthrough     pass all arguments to git [default]
    -a          mode=add             execute git add with configurable preset lists of files/directories
    -g          mode=gui             invoke the gitk git GUI

    -s          summary              show a summary of the execution context and exit
    -n          dry-run              show the command that would be executed and exit
    -v          verbose              show more information. Use twice to enable debug output
    -d          debug                print variable values for debugging purposes and exit
    -h          help                 Show this help message and exit

Commands:
    help        Shows this help message and exits
    version     Shows the version of cfg and exits
    <foo bar>   Passes <foo bar> to git/gitk

Valid option combinations
(their order is not relevant)
target |    checked-out          |     reference            |  Command                                  
       |  host        user       |  host        user        |                                           
       |                         |                          |                                           
 host  |  $(hostname) -          |  $(hostname) -           |  cfg                                      
 host  |  $(hostname) -          |  <ref-host>  -           |  cfg           -H <ref-host>              
       |                         |                          |                                           
 user  |  $(hostname) $(whoami)  |  $(hostname) $(whoami)   |  cfg -m                                   
 user  |  $(hostname) $(whoami)  |  $(hostname) <ref-user>  |  cfg                         -U <ref-user>
 user  |  $(hostname) $(whoami)  |  $(hostname) <ref-user>  |  cfg -m                      -U <ref-user>
 user  |  $(hostname) $(whoami)  |  <ref-host>  $(whoami)   |  cfg -m        -H <ref-host>              
 user  |  $(hostname) $(whoami)  |  <ref-host>  <ref-user>  |  cfg           -H <ref-host> -U <ref-user>
 user  |  $(hostname) $(whoami)  |  <ref-host>  <ref-user>  |  cfg -m        -H <ref-host> -U <ref-user>
       |                         |                          |                                           
 user  |  $(hostname) <user>     |  $(hostname) <user>      |  cfg -u <user>                            
 user  |  $(hostname) <user>     |  $(hostname) $(whoami)   |  cfg -u <user>               -M           
 user  |  $(hostname) <user>     |  $(hostname) <ref-user>  |  cfg -u <user>               -U <ref-user>
 user  |  $(hostname) <user>     |  <ref-host>  <user>      |  cfg -u <user> -H <ref-host>              
 user  |  $(hostname) <user>     |  <ref-host>  $(whoami)   |  cfg -u <user> -H <ref-host> -M           
 user  |  $(hostname) <user>     |  <ref-host>  <ref-user>  |  cfg -u <user> -H <ref-host> -U <ref-user>


EOF
    exit 1
}

if [ -f /usr/local/etc/cfg.conf ]; then
  . /usr/local/etc/cfg.conf
fi

CFG_ROOT_DIR="${CFG_ROOT_DIR:-/usr/local/cfg}"
ZPOOL="${ZPOOL:-zroot}"
ZROOTFS="${ZROOTFS:-/CONFIG}"
CFG_ROOT_ZFS="${ZPOOL}${ZROOTFS}"

CHECKED_OUT_HOST="${HOSTNAME}"
CHECKED_OUT_USER="${CMD_USER}"
REFERENCE_HOST="${HOSTNAME}"

while getopts "mu:H:MU:pagsnvdh" FLAG; do
    case "${FLAG}" in
    m)
        TARGET='user'
        CHECKED_OUT_USER="${CMD_USER}"
        ;;
    u)
        TARGET='user'
        CHECKED_OUT_USER="${OPTARG}"
        ;;
    H)
        REFERENCE_HOST="$OPTARG"
        ;;
    M)
        TARGET='user'
        REFERENCE_USER="${CMD_USER}"
        ;;
    U)
        TARGET='user'
        REFERENCE_USER="$OPTARG"
        ;;
    p)
        if [ -n "${MODE}" ]; then
            msg_error "you cannot invoke -p, -a or -g at the same time"
            usage
        fi
        MODE='passthrough'
        ;;
    a)
        if [ -n "${MODE}" ]; then
            msg_error "you cannot invoke -p, -a or -g at the same time"
            usage
        fi
        MODE='add'
        ;;
    g)
        if [ -n "${MODE}" ]; then
            msg_error "you cannot invoke -p, -a or -g at the same time"
            usage
        fi
        MODE='gui'
        ;;
    s)
        SHOW_SUMMARY="yes"
        ;;
    n)
        DRY_RUN="yes"
        DRY_RUN_CMD="msg_dry_run"
        ;;
    v)
        VERBOSE=$((${VERBOSE:-0} + 1))
        ;;
    d)
        USE_DEBUG="yes"
        ;;
    h)
        usage
        ;;
    *)
        usage
        ;;
    esac
done

shift $((OPTIND-1))

if [ $# -lt 1 ]; then
    CMD="status"
else
    CMD="$1"
fi
shift

[ "${CMD}" = "help" ] && usage
[ ${VERBOSE} -lt 2 ] || VERBOSE=2
[ "${NO_ZFS}" = "yes" ] && USE_ZFS="no"
TARGET="${TARGET:-host}"
MODE="${MODE:-passthrough}"
if [ "${TARGET}" = "user" ]; then
    REFERENCE_USER="${REFERENCE_USER:-${CHECKED_OUT_USER}}"
else
    CHECKED_OUT_USER=root
    REFERENCE_USER=root
fi

# echo "target: ${TARGET}"
# echo "checked_out_host: ${CHECKED_OUT_HOST}"
# echo "checked_out_user: ${CHECKED_OUT_USER}"
# echo "reference_host: ${REFERENCE_HOST}"
# echo "reference_user: ${REFERENCE_USER}"
# echo "mode: ${MODE}"
# echo "dry_run: ${DRY_RUN}"
# echo "verbose: ${VERBOSE}"
# echo "use_debug: ${USE_DEBUG}"

if [ "$(user_exists ${CHECKED_OUT_USER})" = 0 ]; then
    CHECKED_OUT_USER_EXISTS="no"
    # TODO: explain this user can be used as repo reference (-U) and later on might be supported for repo to repo diff
    msg_error "${CHECKED_OUT_USER} does not exist on this machine."
    exit 1
else
    CHECKED_OUT_USER_EXISTS="yes"
fi

if [ "$(user_exists ${REFERENCE_USER})" = 0 ]; then
    # if the reference user does exist as a user on the machine
    # the git repo should be owned by reference user
    REPO_OWNER="root"
    REFERENCE_USER_EXISTS="no"
else
    # if the reference user does exist as a user on the machine
    # the git repo should be owned by reference user
    REPO_OWNER="${REFERENCE_USER}"
    REFERENCE_USER_EXISTS="yes"
fi

ROOT_DOAS_CMD=none
CO_USER_DOAS_CMD=none
REPO_OWNER_DOAS_CMD=none

DOAS_SCORE=0
DOAS_CMD=$(command -v doas) && DOAS_SCORE=1
if [ "${DOAS_SCORE}" = "1" ]; then
    if [ "${CMD_USER}" = "root" ]; then
        DOAS_SCORE=2
        ROOT_DOAS_CMD=""
    else
        ${DOAS_CMD} -u root id 1>/dev/null 2>/dev/null && DOAS_SCORE=2
        if [ "${DOAS_SCORE}" = "2" ]; then
            ROOT_DOAS_CMD="${DOAS_CMD} -u root"
        else
            MISSING_DOAS_ROOT_PERMISSIONS=yes
        fi
    fi

    if [ "${CMD_USER}" = "${CHECKED_OUT_USER}" ]; then
        DOAS_SCORE=$(($DOAS_SCORE+1))
        CO_USER_DOAS_CMD=""
    else
        TALLY=${DOAS_SCORE}
        ${DOAS_CMD} -u ${CHECKED_OUT_USER} id 1>/dev/null 2>/dev/null && DOAS_SCORE=$(($DOAS_SCORE+1))
        if [ "${DOAS_SCORE}" -gt "${TALLY}" ]; then
            CO_USER_DOAS_CMD="${DOAS_CMD} -u ${CHECKED_OUT_USER}"
        else
            MISSING_DOAS_CO_PERMISSIONS=yes
        fi
    fi

    if [ "${CMD_USER}" = "${REPO_OWNER}" ]; then
        DOAS_SCORE=$(($DOAS_SCORE+1))
        REPO_OWNER_DOAS_CMD=""
    else
        TALLY=${DOAS_SCORE}
        ${DOAS_CMD} -u ${REPO_OWNER} id 1>/dev/null 2>/dev/null && DOAS_SCORE=$(($DOAS_SCORE+1))
        if [ "${DOAS_SCORE}" -gt "${TALLY}" ]; then
            REPO_OWNER_DOAS_CMD="${DOAS_CMD} -u ${REPO_OWNER}"
        else
            MISSING_DOAS_REPO_OWNER_PERMISSIONS=yes
        fi
    fi
fi

SUDO_SCORE=0
SUDO_CMD=$(command -v sudo) && SUDO_SCORE=1
if [ "${SUDO_SCORE}" = "1" ]; then
    if [ -z "${ROOT_DOAS_CMD}" ]; then
        if [ "${CMD_USER}" = "root" ]; then
            SUDO_SCORE=2
            ROOT_DOAS_CMD=""
        else
            ${SUDO_CMD} -u root id 1>/dev/null 2>/dev/null && SUDO_SCORE=2
            if [ "${SUDO_SCORE}" = "2" ]; then
                ROOT_DOAS_CMD="${SUDO_CMD} -u root"
            else
                MISSING_SUDO_ROOT_PERMISSIONS=yes
            fi
        fi
    fi

    if [ -z "${CO_USER_DOAS_CMD}" ]; then
        if [ "${CMD_USER}" = "${CHECKED_OUT_USER}" ]; then
            SUDO_SCORE=$(($SUDO_SCORE+1))
            CO_USER_DOAS_CMD=""
        else
            TALLY=${SUDO_SCORE}
            ${SUDO_CMD} -u ${CHECKED_OUT_USER} id 1>/dev/null 2>/dev/null && SUDO_SCORE=$(($SUDO_SCORE+1))
            if [ "${SUDO_SCORE}" -gt "${TALLY}" ]; then
                CO_USER_DOAS_CMD="${SUDO_CMD} -u ${CHECKED_OUT_USER}"
            else
                MISSING_DOAS_CO_PERMISSIONS=yes
            fi
        fi
    fi

    if [ -z "${REPO_OWNER_DOAS_CMD}" ]; then
        if [ "${REPO_OWNER}" = "${CMD_USER}" ]; then
            SUDO_SCORE=$(($SUDO_SCORE+1))
            REPO_OWNER_DOAS_CMD=""
        else
            TALLY=${SUDO_SCORE}
            ${SUDO_CMD} -u ${REPO_OWNER} id 1>/dev/null 2>/dev/null && SUDO_SCORE=$(($SUDO_SCORE+1))
            if [ "${SUDO_SCORE}" -gt "${TALLY}" ]; then
                REPO_OWNER_DOAS_CMD="${SUDO_CMD} -u ${REPO_OWNER}"
            else
                MISSING_SUDO_REPO_OWNER_PERMISSIONS=yes
            fi
        fi
    fi
fi

[ "${MISSING_DOAS_ROOT_PERMISSIONS}" = "yes" ]       || [ "${MISSING_SUDO_ROOT_PERMISSIONS}" = "yes" ]       && MISSING_PERMISSIONS=yes
[ "${MISSING_DOAS_CO_PERMISSIONS}" = "yes" ]         || [ "${MISSING_SUDO_CO_PERMISSIONS}" = "yes" ]         && MISSING_PERMISSIONS=yes
[ "${MISSING_DOAS_REPO_OWNER_PERMISSIONS}" = "yes" ] || [ "${MISSING_SUDO_REPO_OWNER_PERMISSIONS}" = "yes" ] && MISSING_PERMISSIONS=yes
if [ "$(whoami)" = "root" ]; then
    MISSING_PERMISSIONS=no
    ROOT_DOAS_CMD=""
    CO_USER_DOAS_CMD=""
    REPO_OWNER_DOAS_CMD=""
fi

if [ "${ROOT_DOAS_CMD}" = "none" -o "${CO_USER_DOAS_CMD}" = "none" -o "${REPO_OWNER_DOAS_CMD}" = "none" ]; then
    if [ "${DOAS_CMD}" = "" -a "${SUDO_CMD}" = "" ]; then
        DOAS_CMD="none"
        SUDO_CMD="none"
        if [ "${ROOT_DOAS_CMD}" = "none" ]; then
            ROOT_DOAS_CMD=""
        fi
        if [ "${CO_USER_DOAS_CMD}" = "none" ]; then
            CO_USER_DOAS_CMD=""
        fi
        if [ "${REPO_OWNER_DOAS_CMD}" = "none" ]; then
            REPO_OWNER_DOAS_CMD=""
        fi
    fi

    if [ "${DOAS_CMD}" = "none" -a "${SUDO_CMD}" = "none" ]; then
        msg_warn "doas and sudo executables not found."
        msg_warn "This tool will only be able to leverage the resources your user has direct access to"
    fi
fi

if [ "${MISSING_PERMISSIONS}" = "yes" ]; then
    # TODO: narrow down permission recommendations
    msg "You need to add one of the following permissions for each user:"
    [ -n "${MISSING_DOAS_ROOT_PERMISSIONS}" ] && msg_warn \
        "  - /usr/local/etc/doas.conf: permit nopass keepenv ${CMD_USER} as root"
    [ -n "${MISSING_SUDO_ROOT_PERMISSIONS}" ] && msg_warn \
        "  - /usr/local/etc/sudoers.d/cfg.conf: ${CMD_USER} ALL=(root) ALL"
    if [ ! "${CHECKED_OUT_USER}" = "root" ]; then
        [ -n "${MISSING_DOAS_CO_PERMISSIONS}" ] && msg_warn \
            "  - /usr/local/etc/doas.conf: permit nopass keepenv ${CMD_USER} as ${CHECKED_OUT_USER}"
        [ -n "${MISSING_SUDO_CO_PERMISSIONS}" ] && msg_warn \
            "  - /usr/local/etc/sudoers.d/cfg.conf: ${CMD_USER} ALL=(${CHECKED_OUT_USER}) ALL"
    fi
    if [ ! "${REPO_OWNER}" = "${CHECKED_OUT_USER}" -a ! "${REPO_OWNER}" = "root" ]; then
        [ -n "${MISSING_DOAS_REPO_OWNER_PERMISSIONS}" ] && msg_warn \
            "  - /usr/local/etc/doas.conf: permit nopass keepenv ${CMD_USER} as ${REPO_OWNER}"
        [ -n "${MISSING_SUDO_REPO_OWNER_PERMISSIONS}" ] && msg_warn \
            "  - /usr/local/etc/sudoers.d/cfg.conf: ${CMD_USER} ALL=(${REPO_OWNER}) ALL"
    fi
    exit 2
fi


if [ "${TARGET}" = "user" ]; then
    CHECKED_OUT_HOMEDIR=$( ${ROOT_DOAS_CMD} pw user show -n ${CHECKED_OUT_USER} | awk -F ':' '{print $9}' )
    WORK_TREE="${CHECKED_OUT_HOMEDIR}"
    CFG_REPO_NAME="user_${REFERENCE_USER}"
    if [ "${REFERENCE_USER_EXISTS}" = "yes" ]; then
        REFERENCE_HOMEDIR=$( ${ROOT_DOAS_CMD} pw user show -n ${REFERENCE_USER} | awk -F ':' '{print $9}' )
    else
        # best guess
        if [ "${REFERENCE_USER}" = "root" ]; then
            REFERENCE_HOMEDIR=/root
        else
            REFERENCE_HOMEDIR=/home/${REFERENCE_USER}
        fi
    fi
    REFERENCE_WORK_TREE="${REFERENCE_HOMEDIR}"
elif [ "${TARGET}" = "host" ]; then
    CHECKED_OUT_HOMEDIR=
    WORK_TREE=/
    CFG_REPO_NAME="host"
    REFERENCE_HOMEDIR=
    REFERENCE_WORK_TREE=/
fi

REPO_USER_ID=$(  ${ROOT_DOAS_CMD} pw user show -n ${REPO_OWNER} | awk -F ':' '{print $3}' )
REPO_GROUP_ID=$( ${ROOT_DOAS_CMD} pw user show -n ${REPO_OWNER} | awk -F ':' '{print $4}' )

env_set LC_ALL "${LC_ALL}"
env_set CFG_VERSION "${CFG_VERSION}"
env_set CFG_NAME "${CFG_NAME}"
env_set CFG_PKGNAME "${CFG_PKGNAME}"
env_set TARGET "${TARGET:-host}"
env_set MODE "${MODE:-passthrough}"
env_set HOSTNAME "${HOSTNAME}"
env_set CHECKED_OUT_HOST "${CHECKED_OUT_HOST}"
env_set REFERENCE_HOST "${REFERENCE_HOST}"
env_set CHECKED_OUT_USER "${CHECKED_OUT_USER}"
env_set CHECKED_OUT_USER_EXISTS "${CHECKED_OUT_USER_EXISTS}"
env_set CHECKED_OUT_HOMEDIR "${CHECKED_OUT_HOMEDIR}"
env_set WORK_TREE "${WORK_TREE}"
env_set REFERENCE_USER "${REFERENCE_USER}"
env_set REFERENCE_USER_EXISTS "${REFERENCE_USER_EXISTS}"
env_set REFERENCE_HOMEDIR "${REFERENCE_HOMEDIR}"
env_set REFERENCE_WORK_TREE "${REFERENCE_WORK_TREE}"
env_set REPO_OWNER "${REPO_OWNER}"
env_set DOAS_CMD "${DOAS_CMD}"
env_set SUDO_CMD "${SUDO_CMD}"
env_set CO_USER_DOAS_CMD "${CO_USER_DOAS_CMD}"
env_set REPO_OWNER_DOAS_CMD "${REPO_OWNER_DOAS_CMD}"
env_set ROOT_DOAS_CMD "${ROOT_DOAS_CMD}"
env_set CFG_ROOT_DIR "${CFG_ROOT_DIR}"
env_set ZPOOL "${ZPOOL}"
env_set CFG_ROOT_ZFS "${CFG_ROOT_ZFS}"
env_set DRY_RUN "${DRY_RUN}"
env_set USE_ZFS "${USE_ZFS}"
env_set USE_DEBUG "${USE_DEBUG}"
env_set PATH "${PATH}"
env_set VERBOSE "${VERBOSE}"
env_set REPO_USER_ID "${REPO_USER_ID}"
env_set REPO_GROUP_ID "${REPO_GROUP_ID}"
env_set CFG_REPO_NAME "${CFG_REPO_NAME}"

env_export

if [ -n "${USE_DEBUG}" ]; then
    exec env -i ${CMD_ENV_S:+-S "${CMD_ENV_S}"} env
    msg_debug "ECHO_CMD: ${ECHO_CMD}"
    msg_debug "GIT_CMD: ${GIT_CMD}"
    msg_debug "GITK_CMD: ${GITK_CMD}"
fi

# DRY_RUN_CMD="${ECHO_CMD}"

[ -n "${DRY_RUN_CMD}" ] && echo
[ -n "${DRY_RUN_CMD}" ] && echo "This is a dry run. The following commands will be executed if you remove -n:"


if [ "${USE_ZFS}" = "yes" ]; then
    if [ -n "$(zfs list -H ${CFG_ROOT_ZFS} 2>&1 | grep 'does not exist')" ]; then
        ${DRY_RUN_CMD} ${ROOT_DOAS_CMD} zfs create -p -o mountpoint="${CFG_ROOT_DIR}" "${CFG_ROOT_ZFS}"
    fi
    if [ -z "${DRY_RUN_CMD}" ]; then
        # The current mountpoint can differ
        # e.g. when the pool is mounted in an alternate location
        CURRENT_ROOT_DIR="$(${ROOT_DOAS_CMD} zfs get -H -o value mountpoint ${CFG_ROOT_ZFS})"
        if [ ! "${CURRENT_ROOT_DIR}" = "${CFG_ROOT_DIR}" ]; then
            msg_error "${CFG_ROOT_DIR} is currently mounted on ${CURRENT_ROOT_DIR}"
            exit 4
        fi
        if [ ! -d "${CFG_ROOT_DIR}" ]; then
            msg_error "${CFG_ROOT_DIR} does not exist"
            exit 5
        fi
    fi
fi


CFG_GIT_ZFS="${CFG_ROOT_ZFS}/rw_repos/${REFERENCE_HOST}/${CFG_REPO_NAME}"
CFG_GIT_DIR="${CFG_ROOT_DIR}/rw_repos/${REFERENCE_HOST}/${CFG_REPO_NAME}"
CFG_GITK_DIR="${CFG_ROOT_DIR}/gitk/${REFERENCE_HOST}/${CFG_REPO_NAME}"
CFG_GITK_SYMLINK="${CFG_GITK_DIR}/.git"
HOST_INFO_DIR="${CFG_ROOT_DIR}/info/${CHECKED_OUT_HOST}"

if [ ! -d "${CFG_GIT_DIR}" ]; then
    if [ "${USE_ZFS}" = "yes" ]; then
        ${DRY_RUN_CMD} ${ROOT_DOAS_CMD} zfs create -p "${CFG_GIT_ZFS}"
    else
        ${DRY_RUN_CMD} ${ROOT_DOAS_CMD} mkdir -p "${CFG_GIT_DIR}"
    fi
    if [ -z "${DRY_RUN_CMD}" -a ! -d "${CFG_GIT_DIR}" ]; then
        msg_error "${CFG_GIT_DIR} does not exist"
        exit 4
    fi
fi

if [ ! -d "${HOST_INFO_DIR}" ]; then
    ${DRY_RUN_CMD} ${ROOT_DOAS_CMD} mkdir -p "${HOST_INFO_DIR}"
fi

pkg_info() {
    if [ -z "${DRY_RUN_CMD}" ]; then
        ${ROOT_DOAS_CMD} pkg prime-origins | uniq | \
            ${ROOT_DOAS_CMD} dd of="${HOST_INFO_DIR}"/pkg_prime_info.txt;
        ${ROOT_DOAS_CMD} pkg info | \
            ${ROOT_DOAS_CMD} dd of="${HOST_INFO_DIR}"/pkg_full_info.txt;
    else
        echo "This would dump the output of 'pkg prime-origins | uniq' to ${HOST_INFO_DIR}/pkg_prime_info.txt"
        echo "This would dump the output of 'pkg info' to ${HOST_INFO_DIR}/pkg_full_info.txt"
    fi
}

zfs_base_info() {
    if [ -z "${DRY_RUN_CMD}" ]; then
        ${ROOT_DOAS_CMD} zfs list -o ${ZFS_BASE_PROPERTIES} | \
            ${ROOT_DOAS_CMD} dd of="${HOST_INFO_DIR}"/zfs_base_info.txt
    else
        echo "This would dump the output of 'zfs list -o <ZFS_BASE_PROPERTIES>' to ${HOST_INFO_DIR}/zfs_base_info.txt"
    fi
}

zfs_comparable_info() {
    if [ -z "${DRY_RUN_CMD}" ]; then
        ${ROOT_DOAS_CMD} zfs list -o ${ZFS_COMPARABLE_PROPERTIES} | \
            ${ROOT_DOAS_CMD} dd of="${HOST_INFO_DIR}"/zfs_comparable_info.txt
    else
        echo "This would dump the output of 'zfs list -o <ZFS_COMPARABLE_PROPERTIES>' to ${HOST_INFO_DIR}/zfs_comparable_info.txt"
    fi
}

zfs_full_info() {
    if [ -z "${DRY_RUN_CMD}" ]; then
        ${ROOT_DOAS_CMD} zfs list -o ${ZFS_FULL_PROPERTIES} | \
            ${ROOT_DOAS_CMD} dd of="${HOST_INFO_DIR}"/zfs_full_info.txt
    else
        echo "This would dump the output of 'zfs list -o <ZFS_FULL_PROPERTIES>' to ${HOST_INFO_DIR}/zfs_full_info.txt"
    fi
}

sysctl_output() {
    if [ -z "${DRY_RUN_CMD}" ]; then
        ${ROOT_DOAS_CMD} sysctl -a | \
            ${ROOT_DOAS_CMD} dd of="${HOST_INFO_DIR}"/sysctl_output.txt
    else
        echo "This would dump the output of 'sysctl -a' to ${HOST_INFO_DIR}/sysctl_output.txt"
    fi
}

[ -z "DRY_RUN_CMD" ] && check_for_git

msg "This command matches the checked-out state of ${CHECKED_OUT_HOST}:${WORK_TREE} against the recorded state of ${REFERENCE_HOST}:${REFERENCE_WORK_TREE} in git repository ${CFG_GIT_DIR}"
[ "${SHOW_SUMMARY}" = "yes" ] && exit

if [ ! -L "${CFG_GITK_SYMLINK}" ]; then
    ${DRY_RUN_CMD} ${ROOT_DOAS_CMD} mkdir -p "${CFG_GITK_DIR}"
    ${DRY_RUN_CMD} ${ROOT_DOAS_CMD} chown -R ${REPO_USER_ID}:${REPO_GROUP_ID} "${CFG_GITK_DIR}"
    ${DRY_RUN_CMD} ${REPO_OWNER_DOAS_CMD} ln -sF "${CFG_GIT_DIR}" "${CFG_GITK_SYMLINK}"
fi

${DRY_RUN_CMD} ${ROOT_DOAS_CMD} chown -R ${REPO_USER_ID}:${REPO_GROUP_ID} "${CFG_GIT_DIR}"
${DRY_RUN_CMD} ${ROOT_DOAS_CMD} chown ${REPO_USER_ID}:${REPO_GROUP_ID} "${CFG_GITK_DIR}"

if [ ! -f "${CFG_GIT_DIR}/HEAD" ]; then
    ${DRY_RUN_CMD} ${REPO_OWNER_DOAS_CMD} ${GIT_CMD} --git-dir="${CFG_GIT_DIR}" --work-tree=${WORK_TREE} init
    ${DRY_RUN_CMD} ${ROOT_DOAS_CMD} chown -R ${REPO_USER_ID}:${REPO_GROUP_ID} "${CFG_GIT_DIR}"
fi

if [ "${MODE}" = "passthrough" ]; then
    if [ "${TARGET}" = "host" ]; then
        ${DRY_RUN_CMD} ${ROOT_DOAS_CMD}       ${GIT_CMD} --git-dir="${CFG_GIT_DIR}" --work-tree=${WORK_TREE} ${CMD} ${1+"$@"}
    else
        ${DRY_RUN_CMD} ${REPO_OWNER_DOAS_CMD} ${GIT_CMD} --git-dir="${CFG_GIT_DIR}" --work-tree=${WORK_TREE} ${CMD} ${1+"$@"}
    fi
elif [ "${MODE}" = "add" ]; then
    if [ "${TARGET}" = "host" ]; then
        pkg_info
        zfs_base_info
        zfs_comparable_info
        zfs_full_info
        # TODO: define a meaningful subset of values to capture
        # the current 19K+ entries using 900 Kb might be overkill
        # sysctl_output
        ${DRY_RUN_CMD} ${ROOT_DOAS_CMD}       ${GIT_CMD} --git-dir="${CFG_GIT_DIR}" --work-tree=${WORK_TREE} add ${BASE_HOST_ADD_ITEMS}
        ${DRY_RUN_CMD} ${ROOT_DOAS_CMD}       ${GIT_CMD} --git-dir="${CFG_GIT_DIR}" --work-tree=${WORK_TREE} add -f ${BASE_HOST_FORCE_ADD_ITEMS}
    else
        ${DRY_RUN_CMD} ${REPO_OWNER_DOAS_CMD} ${GIT_CMD} --git-dir="${CFG_GIT_DIR}" --work-tree=${WORK_TREE} add ${WORK_TREE}
    fi
elif [ "${MODE}"="gui" ]; then
    if [ -z "${DRY_RUN_CMD}" ]; then
        check_for_gitk
        cd "${CFG_GITK_DIR}" && ${REPO_OWNER_DOAS_CMD} ${GITK_CMD} &
    else
        ${DRY_RUN_CMD} cd "${CFG_GITK_DIR}" \&\& ${REPO_OWNER_DOAS_CMD} ${GITK_CMD} \&
    fi
fi

${DRY_RUN_CMD} ${ROOT_DOAS_CMD} chown -R ${REPO_USER_ID}:${REPO_GROUP_ID} "${CFG_GIT_DIR}"
${DRY_RUN_CMD} ${ROOT_DOAS_CMD} chown ${REPO_USER_ID}:${REPO_GROUP_ID} "${CFG_GITK_DIR}"

# Example of running another script with the gathered environment
# env -i ${CMD_ENV_S:+-S "${CMD_ENV_S}"} ${DRY_RUN_CMD} ${ROOT_DOAS_CMD} ${GIT_CMD} \
#     --git-dir="${CFG_GIT_DIR}" --work-tree=${WORK_TREE} ${CMD} ${1+"$@"}

[ -n "${DRY_RUN_CMD}" ] && echo
